#ifndef CDJ2000NXS2_H\n#define CDJ2000NXS2_H\n\n#include \"../PioneerEquipmentBase.h\"\n#include \"../JogWheel.h\"\n#include \"../LEDDisplay.h\"\n#include <array>\n#include <memory>\n\nnamespace DJUniverse {\nnamespace Pioneer {\n\n// CDJ-2000NXS2 - Estándar de la industria para clubs profesionales\nclass CDJ2000NXS2 : public CDJPlayerBase {\npublic:\n    // Physical Controls del CDJ-2000NXS2 (como en TribeXR)\n    struct PhysicalControls {\n        // Jog Wheel Section (8\" vs 8.5\" del CDJ-3000)\n        std::unique_ptr<JogWheel> jogWheel;          // 8\" jog wheel\n        bool jogWheelLEDEnabled;\n        float jogWheelLEDBrightness;\n        std::array<uint8_t, 48> jogWheelLEDColors;   // RGB LED ring (16 LEDs)\n        \n        // Display Section (6.1\" LCD vs 9\" táctil del CDJ-3000)\n        std::unique_ptr<LEDDisplay> lcdDisplay;      // 6.1\" LCD monocromo\n        bool displayActive;\n        float displayBrightness;\n        bool displayInvert;                          // Negative display mode\n        \n        // Hot Cue Section (8 pads igual que CDJ-3000)\n        struct HotCuePad {\n            bool pressed;\n            bool assigned;\n            uint32_t cuePosition;\n            uint8_t colorR, colorG, colorB;\n            bool isBlinking;\n            float blinkRate;\n            \n            HotCuePad() : pressed(false), assigned(false), cuePosition(0),\n                         colorR(255), colorG(255), colorB(255), \n                         isBlinking(false), blinkRate(2.0f) {}\n        };\n        std::array<HotCuePad, 8> hotCuePads;\n        bool hotCuePageA;                            // A/B page selector\n        \n        // Transport Controls\n        struct TransportButton {\n            bool pressed;\n            bool ledOn;\n            uint8_t ledR, ledG, ledB;\n            float ledBrightness;\n            \n            TransportButton() : pressed(false), ledOn(false),\n                               ledR(255), ledG(255), ledB(255), ledBrightness(1.0f) {}\n        };\n        TransportButton playPauseButton;\n        TransportButton cueButton;\n        TransportButton syncButton;\n        TransportButton shiftButton;                 // Shift for secondary functions\n        \n        // Loop Controls (más básicos que CDJ-3000)\n        TransportButton loopInButton;\n        TransportButton loopOutButton;\n        TransportButton reloopExitButton;\n        TransportButton loopHalveButton;\n        TransportButton loopDoubleButton;\n        \n        // Auto Loop Buttons\n        std::array<TransportButton, 4> autoLoopButtons; // 1, 2, 4, 8 beats\n        \n        // Mode Switches\n        bool vinylMode;\n        bool slipMode;                               // Slip mode\n        bool quantizeEnabled;\n        bool masterTempoEnabled;\n        \n        // Tempo Section\n        float tempoSliderPosition;                   // 0.0 a 1.0\n        enum TempoRange { RANGE_6, RANGE_10, RANGE_16, RANGE_100, RANGE_WIDE };\n        TempoRange tempoRange;\n        bool tempoBendPlus;\n        bool tempoBendMinus;\n        bool tempoReset;                             // Reset to 0%\n        \n        // Browse Section\n        float browseWheelPosition;\n        bool browseWheelPressed;\n        bool tagButton;                              // Tag tracks\n        bool infoButton;                             // Track info\n        bool menuButton;                             // Menu access\n        \n        // Memory Section\n        std::array<bool, 3> memoryButtons;           // A, B, C (no Hot Cue Bank)\n        \n        // Channel Section\n        float channelFaderPosition;\n        float headphoneCueLevel;\n        \n        // CDJ-2000NXS2 Specific Features\n        bool needleSearchEnabled;                    // Touch strip search\n        float needleSearchPosition;                 // 0.0 a 1.0\n        bool needleSearchActive;\n        \n        // Beat Sync Features\n        bool beatSyncEnabled;\n        float beatSyncPhase;                         // Phase adjustment\n        \n        // Waveform Display Options\n        enum WaveformType { FULL_WAVEFORM, WAVEFORM_ZOOM, SIMPLE_WAVEFORM };\n        WaveformType waveformType;\n        float waveformZoom;                          // 1x to 8x\n        \n        PhysicalControls();\n    } controls;\n    \n    // Audio Specifications (CDJ-2000NXS2)\n    struct AudioSpecs {\n        static constexpr float SAMPLE_RATE = 48000.0f;     // 48kHz\n        static constexpr int BIT_DEPTH = 24;               // 24-bit\n        static constexpr int AUDIO_CHANNELS = 2;           // Stereo\n        static constexpr float MAX_PITCH_RANGE = 100.0f;   // ±100%\n        static constexpr float LOW_LATENCY = 0.7f;          // <0.7ms (vs 0.3ms CDJ-3000)\n        \n        // Format support (menos formatos que CDJ-3000)\n        struct SupportedFormats {\n            bool mp3 = true;\n            bool wav = true;\n            bool aiff = true;\n            bool flac = false;          // No FLAC nativo\n            bool alac = false;          // No ALAC nativo\n            bool aac = true;\n            bool rekordboxXML = true;   // Rekordbox XML analysis\n        } supportedFormats;\n        \n        // Features (algunas menos que CDJ-3000)\n        bool hasKeySync = false;        // No key sync automático\n        bool hasPhaseShift = true;      // Sí phase adjustment\n        bool hasColorWaveform = false;  // Waveform monocromo\n        bool hasWaveformZoom = true;    // Variable zoom\n        bool hasSlipMode = true;        // Slip mode\n        bool hasNeedleSearch = true;    // Touch strip search\n    };\n    \n    // Pro DJ Link Features (CDJ-2000NXS2)\n    struct ProDJLinkFeatures {\n        bool enabled;\n        uint8_t deviceNumber;           // 1-4\n        bool isMasterDevice;\n        bool sharePlayState;\n        bool shareBPMSync;\n        bool shareWaveformData;         // Limited vs CDJ-3000\n        bool shareTrackMetadata;\n        bool allowLinkSearch;           // Search via other devices\n        bool quantizedSync;             // Quantized beat sync\n        \n        ProDJLinkFeatures() : enabled(false), deviceNumber(1), isMasterDevice(false),\n                             sharePlayState(true), shareBPMSync(true),\n                             shareWaveformData(true), shareTrackMetadata(true),\n                             allowLinkSearch(true), quantizedSync(true) {}\n    } proDJLinkFeatures;\n    \n    // Memory Cue Points (A, B, C)\n    struct MemoryCuePoint {\n        bool assigned;\n        uint32_t position;              // Position in samples\n        std::string label;              // Optional label\n        bool isLoop;                    // If it's a loop vs point\n        uint32_t loopEnd;              // End position if loop\n        \n        MemoryCuePoint() : assigned(false), position(0), isLoop(false), loopEnd(0) {}\n    };\n    std::array<MemoryCuePoint, 3> memoryCues; // A, B, C\n    \n    // Slip Mode State\n    struct SlipModeState {\n        bool active;\n        uint32_t slipStartPosition;     // Where slip started\n        uint32_t realPosition;          // Actual playback position\n        uint32_t slipPosition;          // Slip mode position\n        std::vector<float> slipBuffer;  // Buffer for slip audio\n        \n        SlipModeState() : active(false), slipStartPosition(0), \n                         realPosition(0), slipPosition(0) {}\n    } slipState;\n    \n    // Beat Sync State\n    struct BeatSyncState {\n        bool enabled;\n        uint8_t masterDeviceId;         // Which device is master\n        float masterBPM;\n        float beatPhase;                // Phase offset\n        bool quantizedSync;             // Sync to beat grid\n        \n        BeatSyncState() : enabled(false), masterDeviceId(0), \n                         masterBPM(0), beatPhase(0), quantizedSync(true) {}\n    } beatSyncState;\n    \n    // Auto Loop Settings\n    struct AutoLoopSettings {\n        std::array<float, 4> loopLengths; // 1, 2, 4, 8 beats\n        bool rollMode;                   // Roll vs standard loop\n        bool quantizeToBeats;           // Quantize loop points\n        \n        AutoLoopSettings() : loopLengths{1.0f, 2.0f, 4.0f, 8.0f}, \n                            rollMode(false), quantizeToBeats(true) {}\n    } autoLoopSettings;\n\nprivate:\n    // Audio Processing Buffers\n    std::vector<float> audioBuffer;\n    std::vector<float> slipBuffer;\n    std::vector<float> scratchBuffer;\n    \n    // Beat Analysis\n    float detectedBPM;\n    std::vector<uint32_t> beatPositions;\n    uint32_t lastBeatPosition;\n    float beatConfidence;\n    \n    // Loop State\n    bool loopActive;\n    uint32_t loopStartPosition;\n    uint32_t loopEndPosition;\n    float loopLengthBeats;\n    bool rollModeActive;\n    \n    // Waveform Analysis\n    std::vector<float> waveformData;\n    std::vector<uint32_t> waveformColors;     // Simple color coding\n    float waveformZoomLevel;\n    uint32_t waveformViewStart;               // Start position for zoom\n    \n    // Performance Monitoring\n    std::chrono::steady_clock::time_point lastBeatTime;\n    float averageLatency;\n    int consecutiveDropouts;\n    \npublic:\n    CDJ2000NXS2();\n    ~CDJ2000NXS2() override;\n    \n    // PioneerEquipmentBase Implementation\n    void initialize() override;\n    void process(float* buffer, int frames) override;\n    void updateDisplay() override;\n    void handleMIDI(int control, int value) override;\n    void shutdown() override;\n    \n    // CDJPlayerBase Implementation  \n    void play() override;\n    void pause() override;\n    void cue() override;\n    void seek(float position) override;\n    void setTempo(float tempo) override;\n    void loadTrack(uint32_t trackId) override;\n    \n    // CDJ-2000NXS2 Specific Controls\n    \n    // Jog Wheel Control\n    void handleJogWheelTouch(float x, float y, float pressure);\n    void handleJogWheelRotation(float deltaRadians);\n    void handleJogWheelRelease();\n    void setJogWheelLEDPattern(int pattern); // Different LED patterns\n    void updateJogWheelLEDs();\n    \n    // Hot Cue Management (similar a CDJ-3000 pero más básico)\n    void setHotCue(int padIndex, uint32_t position);\n    void triggerHotCue(int padIndex);\n    void deleteHotCue(int padIndex);\n    void setHotCueColor(int padIndex, uint8_t r, uint8_t g, uint8_t b);\n    void switchHotCuePage(bool pageA);\n    \n    // Auto Loop Controls\n    void activateAutoLoop(int buttonIndex);   // 0=1 beat, 1=2 beats, etc.\n    void activateRoll(int buttonIndex);       // Roll mode\n    void exitAutoLoop();\n    \n    // Loop Controls\n    void setLoopIn();\n    void setLoopOut();\n    void activateLoop();\n    void exitLoop();\n    void halveLoop();\n    void doubleLoop();\n    void reloop();\n    \n    // Memory Cue Points\n    void setMemoryCue(int cueIndex, uint32_t position); // A=0, B=1, C=2\n    void triggerMemoryCue(int cueIndex);\n    void deleteMemoryCue(int cueIndex);\n    void setMemoryLoop(int cueIndex, uint32_t start, uint32_t end);\n    \n    // Tempo and Pitch Control\n    void setTempoSlider(float position);\n    void setTempoRange(PhysicalControls::TempoRange range);\n    void tempoBendPlus(bool active);\n    void tempoBendMinus(bool active);\n    void resetTempo();\n    void setMasterTempo(bool enabled);\n    \n    // Mode Controls\n    void setVinylMode(bool enabled);\n    void setSlipMode(bool enabled);\n    void setQuantize(bool enabled);\n    void setShiftMode(bool enabled);          // Shift for secondary functions\n    \n    // Browse and Navigation\n    void rotateBrowseWheel(float delta);\n    void pressBrowseWheel();\n    void pressTagButton();                    // Tag track for later\n    void pressInfoButton();                   // Show track info\n    void pressMenuButton();                   // Access menu\n    \n    // Needle Search (Touch Strip)\n    void handleNeedleSearch(float position, bool pressed);\n    void enableNeedleSearch(bool enabled);\n    \n    // Beat Sync Features\n    void enableBeatSync(bool enabled);\n    void syncToMaster();\n    void becomeBeatMaster();\n    void adjustBeatPhase(float deltaPhase);   // Fine phase adjustment\n    \n    // Waveform Display\n    void setWaveformType(PhysicalControls::WaveformType type);\n    void setWaveformZoom(float zoom);         // 1x to 8x\n    void scrollWaveform(float delta);\n    \n    // Pro DJ Link Integration\n    void enableProDJLink(bool enabled, uint8_t deviceNumber);\n    void linkSearchTracks(const std::string& query);\n    void requestTrackFromLink(uint8_t sourceDevice, uint32_t trackId);\n    void shareWaveformToLink();\n    \n    // Channel and Output\n    void setChannelFader(float position);\n    void setHeadphoneCue(float level);\n    \n    // Slip Mode Operations\n    void enterSlipMode();\n    void exitSlipMode();\n    void processSlipMode(float* buffer, int frames);\n    \n    // Advanced Beat Analysis\n    void updateBeatDetection(const float* buffer, int frames);\n    void calibrateBeatGrid();\n    void adjustBeatGrid(float adjustment);\n    \n    // Display Updates\n    void updateTrackDisplay();\n    void updateBPMDisplay();\n    void updateTempoDisplay();\n    void updateLoopDisplay();\n    void updateSlipDisplay();\n    void updateMemoryDisplay();\n    \n    // State Information\n    bool isSlipModeActive() const { return slipState.active; }\n    bool isBeatSyncActive() const { return beatSyncState.enabled; }\n    bool isRollModeActive() const { return rollModeActive; }\n    float getWaveformZoom() const { return waveformZoomLevel; }\n    std::array<MemoryCuePoint, 3> getMemoryCues() const { return memoryCues; }\n    \n    // Performance Metrics\n    float getBeatConfidence() const { return beatConfidence; }\n    float getAverageLatency() const { return averageLatency; }\n    int getDropoutCount() const { return consecutiveDropouts; }\n    \n    // Configuration\n    void loadRekordboxAnalysis(const std::string& xmlPath);\n    void saveUserSettings();\n    void loadUserSettings();\n    \n    // Web Interface Integration\n    nlohmann::json getStateForWeb() override;\n    void updateFromWeb(const nlohmann::json& webState) override;\n    \n    // Debugging and Diagnostics\n    std::string getDetailedStatus();\n    void runDiagnostics();\n    void calibrateAudioLatency();\n    \nprivate:\n    // Internal Processing\n    void processAudioInternal(float* buffer, int frames);\n    void processVinylMode(float* buffer, int frames);\n    void processLoopInternal(float* buffer, int frames);\n    void processAutoLoop(float* buffer, int frames);\n    \n    // Beat Processing\n    void updateBeatGrid();\n    void detectBeatsOnsetDetection(const float* buffer, int frames);\n    void syncBeatToMaster();\n    \n    // Memory Management\n    void updateMemoryCueStates();\n    void processMemoryCueTrigger(int cueIndex);\n    \n    // Waveform Processing\n    void generateWaveformData();\n    void updateWaveformView();\n    void colorCodeWaveform();\n    \n    // Pro DJ Link Internal\n    void sendProDJLinkBeatSync();\n    void receiveProDJLinkSync(const nlohmann::json& data);\n    void handleLinkTrackRequest(uint32_t trackId);\n    \n    // LED Control\n    void updateAllLEDs();\n    void updateHotCueLEDs();\n    void updateTransportLEDs();\n    void setJogWheelLEDRing(const std::array<uint8_t, 48>& colors);\n    \n    // Utility\n    void validateAllControls();\n    void resetToDefaultState();\n    uint32_t quantizePositionToBeat(uint32_t position);\n    float calculateBeatPhase(uint32_t position);\n};\n\n} // namespace Pioneer\n} // namespace DJUniverse\n\n#endif // CDJ2000NXS2_H