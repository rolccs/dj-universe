#ifndef CDJ3000_H\n#define CDJ3000_H\n\n#include \"../PioneerEquipmentBase.h\"\n#include \"../JogWheel.h\"\n#include \"../LEDDisplay.h\"\n#include <array>\n#include <memory>\n#include <chrono>\n\nnamespace DJUniverse {\nnamespace Pioneer {\n\n// CDJ-3000 - Reproductor profesional flagship de Pioneer\nclass CDJ3000 : public CDJPlayerBase {\npublic:\n    // Physical Controls del CDJ-3000 (exactamente como en TribeXR)\n    struct PhysicalControls {\n        // Jog Wheel Section\n        std::unique_ptr<JogWheel> jogWheel;          // 8.5\" jog wheel táctil\n        bool jogWheelLEDEnabled;\n        float jogWheelLEDBrightness;\n        \n        // Display Section  \n        std::unique_ptr<LEDDisplay> touchDisplay;    // 9\" touch screen a color\n        bool displayActive;\n        float displayBrightness;\n        \n        // Hot Cue Section (8 pads)\n        struct HotCuePad {\n            bool pressed;\n            bool assigned;          // Si tiene cue point asignado\n            uint32_t cuePosition;   // Posición en samples\n            uint8_t colorR, colorG, colorB; // Color del pad\n            bool isBlinking;\n            \n            HotCuePad() : pressed(false), assigned(false), cuePosition(0),\n                         colorR(255), colorG(255), colorB(255), isBlinking(false) {}\n        };\n        std::array<HotCuePad, 8> hotCuePads;   // Pads A1-A4, B1-B4\n        bool hotCuePageA;                      // true=página A, false=página B\n        \n        // Transport Controls\n        struct TransportButton {\n            bool pressed;\n            bool ledOn;\n            uint8_t ledR, ledG, ledB;\n            \n            TransportButton() : pressed(false), ledOn(false), \n                               ledR(255), ledG(255), ledB(255) {}\n        };\n        TransportButton playPauseButton;\n        TransportButton cueButton;\n        TransportButton syncButton;\n        TransportButton callButton;            // Call/Next button\n        TransportButton reloopExitButton;\n        \n        // Loop Controls\n        TransportButton loopInButton;\n        TransportButton loopOutButton;\n        TransportButton loopHalveButton;\n        TransportButton loopDoubleButton;\n        \n        // Mode Switches\n        bool vinylMode;                        // Vinyl vs CDJ mode\n        bool slipMode;                         // Slip mode\n        bool quantizeEnabled;                  // Quantize on/off\n        bool masterTempoEnabled;               // Master tempo lock\n        \n        // Tempo Section\n        float tempoSliderPosition;             // 0.0 a 1.0 (center = 0.5)\n        enum TempoRange { RANGE_6, RANGE_10, RANGE_16, RANGE_50, RANGE_100 };\n        TempoRange tempoRange;\n        bool tempoBendPlus;                    // Tempo bend + button\n        bool tempoBendMinus;                   // Tempo bend - button\n        \n        // Browse Section\n        float browseWheelPosition;\n        bool browseWheelPressed;               // Push-encoder\n        bool backButton;\n        \n        // Memory Section\n        std::array<bool, 4> memoryButtons;     // Memory A, B, C, Hot Cue Bank\n        \n        // Channel Section\n        float channelFaderPosition;           // 0.0 a 1.0\n        float headphoneCueLevel;              // 0.0 a 1.0\n        \n        // Advanced Features (CDJ-3000 specific)\n        bool keyShiftEnabled;                 // Key shift mode\n        int keyShiftValue;                    // -12 a +12 semitones\n        bool phaseMeterEnabled;               // Phase meter display\n        bool beatJumpMode;                    // Beat jump mode\n        int beatJumpSize;                     // 1, 2, 4, 8, 16, 32 beats\n        \n        // Touch Strip (Needle Search)\n        float touchStripPosition;             // 0.0 a 1.0\n        bool touchStripActive;\n        \n        PhysicalControls();\n    } controls;\n    \n    // Audio Processing Specifications (CDJ-3000)\n    struct AudioSpecs {\n        static constexpr float SAMPLE_RATE = 48000.0f;     // 48kHz professional\n        static constexpr int BIT_DEPTH = 24;               // 24-bit precision\n        static constexpr int AUDIO_CHANNELS = 2;           // Stereo\n        static constexpr float MAX_PITCH_RANGE = 100.0f;   // ±100% pitch\n        static constexpr float ULTRA_LOW_LATENCY = 0.3f;   // <0.3ms processing\n        \n        // Format support\n        struct SupportedFormats {\n            bool mp3 = true;\n            bool wav = true;\n            bool aiff = true;\n            bool flac = true;\n            bool alac = true;\n            bool aac = true;\n            bool ogg = false;           // CDJ-3000 doesn't support OGG\n        } supportedFormats;\n        \n        // Advanced audio features\n        bool hasKeySync = true;         // Musical key synchronization\n        bool hasPhaseShift = true;      // Phase adjustment\n        bool hasColorWaveform = true;   // Full color waveform\n        bool hasWaveformZoom = true;    // Variable zoom levels\n        int waveformColors = 7;         // 7-color frequency analysis\n    };\n    \n    // Pro DJ Link Features (CDJ-3000)\n    struct ProDJLinkFeatures {\n        bool enabled;\n        uint8_t deviceNumber;           // 1-4\n        bool isMasterDevice;\n        bool sharePlayState;\n        bool shareBPMSync;\n        bool shareWaveformData;\n        bool shareTrackMetadata;\n        bool allowRemoteControl;       // Control desde otros dispositivos\n        \n        ProDJLinkFeatures() : enabled(false), deviceNumber(1), isMasterDevice(false),\n                             sharePlayState(true), shareBPMSync(true), \n                             shareWaveformData(true), shareTrackMetadata(true),\n                             allowRemoteControl(false) {}\n    } proDJLinkFeatures;\n    \n    // Track Information (current loaded track)\n    struct TrackInfo {\n        uint32_t trackId;\n        std::string title;\n        std::string artist;\n        std::string album;\n        std::string genre;\n        std::string label;\n        std::string key;                // Musical key (Camelot/Open Key)\n        float originalBPM;\n        float currentBPM;               // With tempo adjustment\n        uint32_t duration;              // Duration in milliseconds\n        uint32_t position;              // Current position in milliseconds\n        std::string artworkPath;        // Album artwork\n        bool isAnalyzed;                // Analyzed by rekordbox\n        int rating;                     // 1-5 stars\n        std::string comment;\n        std::vector<std::string> tags;\n        \n        // Audio analysis data\n        std::vector<float> waveformData;\n        std::vector<uint32_t> beatGrid;\n        std::vector<uint8_t> waveformColors;\n        \n        TrackInfo() : trackId(0), originalBPM(0), currentBPM(0), \n                     duration(0), position(0), isAnalyzed(false), rating(0) {}\n    } currentTrack;\n    \n    // Performance Pads (Multi-function)\n    enum PadMode {\n        HOT_CUE_MODE,\n        BEAT_LOOP_MODE,\n        BEAT_JUMP_MODE,\n        SAMPLER_MODE,\n        KEY_SHIFT_MODE,\n        PAD_FX_MODE,\n        RELEASE_FX_MODE,\n        BEAT_SYNC_MODE\n    };\n    \n    struct PerformancePads {\n        PadMode currentMode;\n        std::array<bool, 8> padPressed;\n        std::array<bool, 8> padAssigned;\n        std::array<uint8_t, 24> padColors;  // RGB para cada pad\n        \n        PerformancePads() : currentMode(HOT_CUE_MODE) {\n            padPressed.fill(false);\n            padAssigned.fill(false);\n            padColors.fill(255);\n        }\n    } performancePads;\n\nprivate:\n    // Internal State\n    std::atomic<bool> isPlaying{false};\n    std::atomic<bool> isPaused{false};\n    std::atomic<bool> isCued{false};\n    \n    // Audio Processing\n    std::vector<float> audioBuffer;\n    std::vector<float> scratchBuffer;\n    float pitchValue;               // Current pitch adjustment\n    float tempoValue;               // Current tempo adjustment\n    \n    // Beat Analysis\n    float detectedBPM;\n    std::vector<uint32_t> beatPositions;\n    uint32_t currentBeatPosition;\n    float beatPhase;                // 0.0 to 1.0\n    \n    // Loop State\n    bool loopActive;\n    uint32_t loopStartPosition;\n    uint32_t loopEndPosition;\n    float loopLength;               // In beats\n    \n    // Slip Mode State\n    bool slipModeActive;\n    uint32_t slipStartPosition;\n    uint32_t slipCurrentPosition;\n    \n    // Performance Monitoring\n    std::chrono::steady_clock::time_point lastUpdate;\n    float cpuUsage;\n    int droppedSamples;\n    \npublic:\n    CDJ3000();\n    ~CDJ3000() override;\n    \n    // PioneerEquipmentBase Implementation\n    void initialize() override;\n    void process(float* buffer, int frames) override;\n    void updateDisplay() override;\n    void handleMIDI(int control, int value) override;\n    void shutdown() override;\n    \n    // CDJPlayerBase Implementation\n    void play() override;\n    void pause() override;\n    void cue() override;\n    void seek(float position) override;\n    void setTempo(float tempo) override;\n    void loadTrack(uint32_t trackId) override;\n    \n    // CDJ-3000 Specific Controls\n    \n    // Jog Wheel Control\n    void handleJogWheelTouch(float x, float y, float pressure);\n    void handleJogWheelRotation(float deltaRadians);\n    void handleJogWheelRelease();\n    void setJogWheelLEDBrightness(float brightness);\n    void setJogWheelVinylMode(bool enabled);\n    \n    // Hot Cue Management\n    void setHotCue(int padIndex, uint32_t position);\n    void triggerHotCue(int padIndex);\n    void deleteHotCue(int padIndex);\n    void setHotCueColor(int padIndex, uint8_t r, uint8_t g, uint8_t b);\n    void switchHotCuePage(bool pageA);  // true=A, false=B\n    \n    // Transport Controls\n    void handlePlayPauseButton();\n    void handleCueButton();\n    void handleSyncButton();\n    void handleCallButton();\n    void handleReloopExitButton();\n    \n    // Loop Controls\n    void setLoopIn();\n    void setLoopOut();\n    void activateLoop(float lengthInBeats);\n    void exitLoop();\n    void halveLoop();\n    void doubleLoop();\n    void reloop();\n    \n    // Tempo and Pitch Control\n    void setTempoSlider(float position);        // 0.0 to 1.0\n    void setTempoRange(PhysicalControls::TempoRange range);\n    void tempoBendPlus(bool active);\n    void tempoBendMinus(bool active);\n    void resetTempo();\n    void setMasterTempo(bool enabled);\n    \n    // Mode Controls\n    void setVinylMode(bool enabled);\n    void setSlipMode(bool enabled);\n    void setQuantize(bool enabled);\n    void setKeyShift(int semitones);            // -12 to +12\n    \n    // Browse and Navigation\n    void rotateBrowseWheel(float delta);\n    void pressBrowseWheel();\n    void pressBackButton();\n    void selectTrack(uint32_t trackId);\n    \n    // Performance Pads\n    void setPadMode(PadMode mode);\n    void pressPad(int padIndex);\n    void releasePad(int padIndex);\n    void setPadColor(int padIndex, uint8_t r, uint8_t g, uint8_t b);\n    \n    // Beat Jump\n    void setBeatJumpSize(int beats);            // 1, 2, 4, 8, 16, 32\n    void beatJumpForward();\n    void beatJumpBackward();\n    \n    // Advanced Features\n    void enablePhaseShift(bool enabled);\n    void adjustPhase(float deltaPhase);         // -180 to +180 degrees\n    void syncPhaseToMaster();\n    void enableKeySync(bool enabled);\n    void adjustKey(int semitones);\n    \n    // Touch Strip (Needle Search)\n    void handleTouchStrip(float position, bool pressed);\n    void needleSearch(float position);          // 0.0 to 1.0 of track\n    \n    // Pro DJ Link Integration\n    void enableProDJLink(bool enabled, uint8_t deviceNumber);\n    void becomeMasterDevice();\n    void syncToMasterDevice();\n    void shareCurrentState();\n    \n    // Channel and Output\n    void setChannelFader(float position);\n    void setHeadphoneCue(float level);\n    void enableChannelOutput(bool enabled);\n    \n    // Track Analysis and Information\n    void analyzeLoadedTrack();\n    void updateBeatGrid();\n    void detectBPM();\n    void detectMusicalKey();\n    TrackInfo getCurrentTrackInfo() const { return currentTrack; }\n    \n    // State Information\n    bool isTrackLoaded() const { return currentTrack.trackId != 0; }\n    float getCurrentPosition() const;           // In seconds\n    float getTrackProgress() const;             // 0.0 to 1.0\n    float getCurrentBPM() const { return currentTrack.currentBPM; }\n    float getCurrentTempo() const { return tempoValue; }\n    bool isLoopActive() const { return loopActive; }\n    bool isSlipModeActive() const { return slipModeActive; }\n    \n    // Display and Visual\n    void updateJogWheelLEDs();\n    void updateHotCueLEDs();\n    void updateDisplayInfo();\n    void setDisplayBrightness(float brightness);\n    \n    // Performance and Diagnostics\n    float getCPUUsage() const { return cpuUsage; }\n    int getDroppedSamples() const { return droppedSamples; }\n    std::string getStatusSummary();\n    \n    // Configuration and Presets\n    void loadUserPreferences(const nlohmann::json& prefs);\n    void saveUserPreferences();\n    void resetToFactoryDefaults();\n    \n    // Web Interface Integration\n    nlohmann::json getStateForWeb() override;\n    void updateFromWeb(const nlohmann::json& webState) override;\n    \nprivate:\n    // Internal Processing Methods\n    void processAudioInternal(float* buffer, int frames);\n    void processVinylMode(float* buffer, int frames);\n    void processSlipMode(float* buffer, int frames);\n    void processLoopMode(float* buffer, int frames);\n    void processEffects(float* buffer, int frames);\n    \n    // Beat and Tempo Analysis\n    void updateBeatDetection(const float* buffer, int frames);\n    void updateTempoFromSlider();\n    void quantizePosition(uint32_t& position);\n    \n    // Hot Cue Processing\n    void updateHotCueStates();\n    void processHotCueTrigger(int padIndex);\n    \n    // Display Updates\n    void updateTrackDisplay();\n    void updateBPMDisplay();\n    void updateWaveformDisplay();\n    void updateTempoDisplay();\n    \n    // Pro DJ Link Internal\n    void sendProDJLinkUpdate();\n    void receiveProDJLinkData(const nlohmann::json& data);\n    \n    // Utility Methods\n    uint32_t secondsToSamples(float seconds);\n    float samplesToSeconds(uint32_t samples);\n    float calculatePitchFromTempo(float tempo);\n    void updatePerformanceMetrics();\n    void validateControlValues();\n};\n\n} // namespace Pioneer\n} // namespace DJUniverse\n\n#endif // CDJ3000_H